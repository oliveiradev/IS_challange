require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe StudentsController, :type => :controller do

  describe "GET #index" do
    let(:student1) { create(:student) }
    let(:student2) { create(:student) }


    before(:each) do
      get :index
    end

    it "returns http success" do
      expect(response).to have_http_status(:success)
    end

    it "renders the index template" do
      expect(response).to render_template(:index)
    end

    it "assigns all students as @students" do
      expect(assigns(:students)).to eq([student1, student2])
    end
  end

  describe "GET #show" do
    let(:student) { create(:student) }

    before(:each) do
      get :show, id: student.id
    end

    it "returns http success" do
      expect(response).to have_http_status(:success)
    end

    it "renders the show template" do
      expect(response).to render_template(:show)
    end

    it "assigns the requested student as @student" do
      expect(assigns(:student)).to eq(student)
    end
  end

  describe "GET #assign" do
    let(:course){create(:course)}
    let(:student){create(:student)}

    before(:each) do
      get :assign_course , id: student.id
    end

    it "returns http success" do
      expect(response).to have_http_status(:success)
    end

    it "renders the show template" do
      expect(response).to render_template(:assign_course)
    end

     it "assigns the requested student as @student" do
      expect(assigns(:student)).to eq(student)
    end

     it "assigns the requested all course as @courses" do
      expect(assigns(:courses)).to eq([course])
    end
  end

  describe "GET #confirm_assign" do
    let(:course){create(:course)}
    let(:student){create(:student)}

    before(:each) do
      get :confirm_assign , id: student.id , id_course: course.id
    end

    it "assigns the requested student as @student" do
      expect(assigns(:student)).to eq(student)
    end

    it "redirects to student listing" do
      expect(response).to redirect_to(students_path)
    end
  end

  describe "GET #new" do
    before(:each) do
      get :new
    end

    it "returns http success" do
      expect(response).to have_http_status(:success)
    end

    it "renders the new template" do
      expect(response).to render_template(:new)
    end

    it "assigns a new student as @student" do
      expect(assigns(:student)).to be_a_new(Student)
    end
  end

  describe "POST #create" do
    before(:each) do
      post :create , student: student_attributes
    end

    context 'with valid params' do
      let(:student_attributes){attributes_for(:student)}

      it "assigns a newly created student as @student" do
        expect(assigns(:student)).to be_a(Student)
      end

      it "a new student should be persisted" do
        expect(assigns(:student)).to be_persisted
      end

      it "redirects to house listing" do
        expect(response).to redirect_to(student_path(Student.last))
      end
    end

    context "with invalid params" do
      let(:student_attributes) { attributes_for(:invalid_student) }

      it "assigns a newly created but unsaved student as @student" do
        expect(assigns(:student)).to be_a_new(Student)
      end

      it "re-renders the 'new' template" do
        expect(response).to render_template(:new)
      end
    end
  end

  describe "GET #edit" do
    let(:student) { create(:student) }

    before(:each) do
      get :edit, id: student.id
    end

    it "returns http success" do
      expect(response).to have_http_status(:success)
    end

    it "renders the edit template" do
      expect(response).to render_template(:edit)
    end

    it "assigns the requested student as @student" do
      expect(assigns(:student)).to eq(student)
    end
  end

  describe "PATCH #update" do
    let(:student) { create(:student) }

    before(:each) do
      patch :update, id: student.id, student: student_attributes
    end

    context "with valid params" do
      let(:student_attributes) { attributes_for(:student) }

      it "returns http success" do
        expect(response).to redirect_to(student_path(Student.last))
      end

      it "updates the requested student" do
        student.reload
        post_update_attributes = student.attributes.inject({}){|attrs,(k,v)| attrs[k.to_sym] = v; attrs}
        post_update_attributes.delete(:id)
        post_update_attributes.delete(:created_at)
        post_update_attributes.delete(:updated_at)
        expect(student_attributes).to eq(post_update_attributes)
      end

      it "assigns the requested student as @student" do
        expect(assigns(:student)).to eq(student)
      end
    end

    context "with invalid params" do
      let(:student_attributes) { attributes_for(:invalid_student) }

      it "assigns the student as @student" do
        expect(assigns(:student)).to eq(student)
      end

      it "re-renders the 'edit' template" do
        expect(response).to render_template(:edit)
      end
    end
  end

   describe "DELETE #destroy" do
    let(:student) { create(:student) }

    before(:each) do
      delete :destroy, id: student.id
    end

    it "destroys the requested student" do
      expect(Student.exists?(student.id)).to be(false)
    end

    it "redirects to the students list" do
      expect(response).to redirect_to(students_path)
    end
  end
end
